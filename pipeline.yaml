# PIPELINE DEFINITION
# Name: test
# Description: Pipeline generated from config
components:
  comp-aggregate-columns:
    executorLabel: exec-aggregate-columns
    inputDefinitions:
      parameters:
        aggregation_functions:
          parameterType: STRUCT
        columns_to_aggregate:
          parameterType: LIST
        data_path:
          parameterType: STRING
        groupby_column:
          parameterType: STRING
  comp-anonymize-columns:
    executorLabel: exec-anonymize-columns
    inputDefinitions:
      parameters:
        columns_to_anonymize:
          parameterType: LIST
        data_path:
          parameterType: STRING
  comp-compress-csv-to-gzip:
    executorLabel: exec-compress-csv-to-gzip
    inputDefinitions:
      parameters:
        data_path:
          parameterType: STRING
  comp-compress-json-to-gzip:
    executorLabel: exec-compress-json-to-gzip
    inputDefinitions:
      parameters:
        data_path:
          parameterType: STRING
  comp-filtering:
    executorLabel: exec-filtering
    inputDefinitions:
      parameters:
        column_name:
          parameterType: STRING
        data_path:
          parameterType: STRING
        operation:
          parameterType: STRING
        threshold:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-aggregate-columns:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - aggregate_columns
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'typing'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef aggregate_columns(\n    data_path: str, \n    groupby_column:\
          \ str, \n    columns_to_aggregate: list,  # list[str]\n    aggregation_functions:\
          \ dict  # dict[str, list[str]]\n):\n    # Convert Dataset to DataFrame\n\
          \    data_df = pd.read_csv(data_path)\n\n    try:\n        # Perform the\
          \ aggregation\n        aggregated_data = data_df.groupby(groupby_column).agg(aggregation_functions)\n\
          \n        # Select only the required columns to aggregate\n        aggregated_data\
          \ = aggregated_data[columns_to_aggregate]\n\n        # Save the result to\
          \ the output path\n        aggregated_data.to_csv(data_path, index=False)\n\
          \    except KeyError as e:\n        raise f\"Error: Column {e} not found\
          \ in the data.\"\n    except Exception as e:\n        raise f\"An error\
          \ occurred: {e}\"\n\n"
        image: python:3.12.2
    exec-anonymize-columns:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - anonymize_columns
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' &&\
          \ \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef anonymize_columns(data_path: str, columns_to_anonymize: list):\n\
          \    # Convert the Input dataset to a DataFrame\n    data_df = pd.read_csv(data_path)\n\
          \n    for column in columns_to_anonymize:\n        if column in data_df.columns:\n\
          \            # Anonymize the column using SHA-256 hashing\n            data_df[column]\
          \ = data_df[column].apply(lambda x: hashlib.sha256(str(x).encode()).hexdigest())\n\
          \        else:\n            print(f\"Warning: Column '{column}' not found\
          \ in the data.\")\n\n    # Save the modified DataFrame to the output path\n\
          \        data_df.to_csv(data_path, index=False)\n\n"
        image: python:3.12.2
    exec-compress-csv-to-gzip:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compress_csv_to_gzip
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'gzip'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compress_csv_to_gzip(\n    data_path: str\n):\n    # Convert\
          \ Dataset to DataFrame\n    data_df = pd.read_csv(data_path)\n\n    try:\n\
          \        # Compress DataFrame to CSV GZIP\n        with gzip.open(data_path,\
          \ 'wt') as f:\n            data_df.to_csv(data_path, f)\n    except Exception\
          \ as e:\n        raise f\"An error occurred: {e}\"\n\n"
        image: python:3.12.2
    exec-compress-json-to-gzip:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compress_json_to_gzip
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'gzip'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compress_json_to_gzip(\n    data_path: str\n):\n    # Convert\
          \ Dataset to DataFrame\n    data_df = pd.read_csv(data_path)\n\n    try:\n\
          \        # Convert DataFrame to JSON\n        json_data = data_df.to_json(orient='records')\n\
          \n        # Compress and write to GZIP file\n        with gzip.open(data_path,\
          \ 'wt', encoding='utf-8') as f:\n            f.write(json_data)\n    except\
          \ Exception as e:\n        print(f\"An error occurred: {e}\")\n        #\
          \ Optionally save an empty file in case of failure\n        with open(data_path,\
          \ 'w') as f:\n            f.write('')\n\n"
        image: python:3.12.2
    exec-filtering:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - filtering
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.9.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' &&\
          \ \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef filtering(data_path:str, operation: str, column_name: str, threshold:\
          \ str):\n\n    print(\"inside filtering\")\n    try:\n\n        data =pd.read_csv(data_path)\n\
          \n        if column_name not in data.columns:\n            raise ValueError(f\"\
          Column '{column_name}' does not exist in the DataFrame.\")  \n\n       \
          \ filtered_data=compare_rows(data, column_name, threshold, operation)\n\
          \        if filtered_data.empty:\n            print(\"filtered dat was Empty\
          \ !!!\")\n        filtered_data.to_csv(data_path, index=False)\n       \
          \ print(f\"Filtered data has been written to {data_path}\")\n    except\
          \ FileNotFoundError:\n        print(f\"Error: File '{data_path}' not found.\"\
          )\n    except Exception as e:\n        print(f\"An error occurred: {e}\"\
          )\n\n"
        image: python:3.12.2
pipelineInfo:
  description: Pipeline generated from config
  name: test
root:
  dag:
    tasks:
      aggregate-columns:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-aggregate-columns
        inputs:
          parameters:
            aggregation_functions:
              runtimeValue:
                constant:
                  age: max
                  salary: sum
            columns_to_aggregate:
              runtimeValue:
                constant:
                - salary
            data_path:
              runtimeValue:
                constant: data/result.csv
            groupby_column:
              runtimeValue:
                constant: age
        taskInfo:
          name: aggregate-columns
      anonymize-columns:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-anonymize-columns
        inputs:
          parameters:
            columns_to_anonymize:
              runtimeValue:
                constant:
                - name
                - email
            data_path:
              runtimeValue:
                constant: data/result.csv
        taskInfo:
          name: anonymize-columns
      compress-csv-to-gzip:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compress-csv-to-gzip
        inputs:
          parameters:
            data_path:
              runtimeValue:
                constant: data/result.csv
        taskInfo:
          name: compress-csv-to-gzip
      compress-json-to-gzip:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-compress-json-to-gzip
        inputs:
          parameters:
            data_path:
              runtimeValue:
                constant: data/result.csv
        taskInfo:
          name: compress-json-to-gzip
      filtering:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-filtering
        inputs:
          parameters:
            column_name:
              runtimeValue:
                constant: age
            data_path:
              runtimeValue:
                constant: data/sample-new.csv
            operation:
              runtimeValue:
                constant: greater_than
            threshold:
              runtimeValue:
                constant: '30'
        taskInfo:
          name: filtering
schemaVersion: 2.1.0
sdkVersion: kfp-2.9.0
